// Mocks generated by Mockito 5.3.0 from annotations
// in shortly_clean/test/features/shortly_clean/domain/usecases/usecase_mock_gen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shortly_clean/core/errors/failures.dart' as _i5;
import 'package:shortly_clean/core/usecase/usecase.dart' as _i7;
import 'package:shortly_clean/features/shortly_clean/domain/entities/short_link_entity.dart'
    as _i6;
import 'package:shortly_clean/features/shortly_clean/domain/repository/remote/short_link_remote_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [ShortLinkRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortLinkRemoteRepository extends _i1.Mock
    implements _i3.ShortLinkRemoteRepository {
  MockShortLinkRemoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addShortLinkToHistoryList(
          String? url) =>
      (super.noSuchMethod(Invocation.method(#addShortLinkToHistoryList, [url]),
              returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>(this,
                      Invocation.method(#addShortLinkToHistoryList, [url]))))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeShortLinkFromHistory(
          String? shortLinkId) =>
      (super.noSuchMethod(
              Invocation.method(#removeShortLinkFromHistory, [shortLinkId]),
              returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>(
                      this,
                      Invocation.method(
                          #removeShortLinkFromHistory, [shortLinkId]))))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ShortLink>>>
      getShortLinksFromHistory(_i7.NoParams? noParams) => (super.noSuchMethod(
              Invocation.method(#getShortLinksFromHistory, [noParams]),
              returnValue:
                  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ShortLink>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.ShortLink>>(this,
                          Invocation.method(#getShortLinksFromHistory, [noParams]))))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ShortLink>>>);
}

/// A class which mocks [ShortLinkRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class FakeRepo extends _i1.Mock implements _i3.ShortLinkRemoteRepository {
  FakeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addShortLinkToHistoryList(
          String? url) =>
      (super.noSuchMethod(Invocation.method(#addShortLinkToHistoryList, [url]),
              returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>(this,
                      Invocation.method(#addShortLinkToHistoryList, [url]))))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeShortLinkFromHistory(
          String? shortLinkId) =>
      (super.noSuchMethod(
              Invocation.method(#removeShortLinkFromHistory, [shortLinkId]),
              returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
                  _FakeEither_0<_i5.Failure, void>(
                      this,
                      Invocation.method(
                          #removeShortLinkFromHistory, [shortLinkId]))))
          as _i4.Future<_i2.Either<_i5.Failure, void>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ShortLink>>>
      getShortLinksFromHistory(_i7.NoParams? noParams) => (super.noSuchMethod(
              Invocation.method(#getShortLinksFromHistory, [noParams]),
              returnValue:
                  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ShortLink>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.ShortLink>>(this,
                          Invocation.method(#getShortLinksFromHistory, [noParams]))))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ShortLink>>>);
}
