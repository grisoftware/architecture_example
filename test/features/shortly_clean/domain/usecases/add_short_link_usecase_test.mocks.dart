// Mocks generated by Mockito 5.3.0 from annotations
// in shortly_clean/test/features/shortly_clean/domain/usecases/add_short_link_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shortly_clean/features/shortly_clean/data/model/short_link_model.dart'
    as _i4;
import 'package:shortly_clean/features/shortly_clean/domain/repository/remote/short_link_remote_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ShortLinkRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockShortLinkRemoteRepository extends _i1.Mock
    implements _i2.ShortLinkRemoteRepository {
  MockShortLinkRemoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addShortLinkToHistoryList(String? url) =>
      (super.noSuchMethod(Invocation.method(#addShortLinkToHistoryList, [url]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
  @override
  _i3.Future<void> removeShortLinkFromHistory(String? shortLinkId) =>
      (super.noSuchMethod(
              Invocation.method(#removeShortLinkFromHistory, [shortLinkId]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
  @override
  _i3.Stream<List<_i4.ShortLinkModel>> getShortLinksFromHistory() =>
      (super.noSuchMethod(Invocation.method(#getShortLinksFromHistory, []),
              returnValue: _i3.Stream<List<_i4.ShortLinkModel>>.empty())
          as _i3.Stream<List<_i4.ShortLinkModel>>);
}

/// A class which mocks [ShortLinkRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class FakeRepo extends _i1.Mock implements _i2.ShortLinkRemoteRepository {
  FakeRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addShortLinkToHistoryList(String? url) =>
      (super.noSuchMethod(Invocation.method(#addShortLinkToHistoryList, [url]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
  @override
  _i3.Future<void> removeShortLinkFromHistory(String? shortLinkId) =>
      (super.noSuchMethod(
              Invocation.method(#removeShortLinkFromHistory, [shortLinkId]),
              returnValue: _i3.Future<void>.value(),
              returnValueForMissingStub: _i3.Future<void>.value())
          as _i3.Future<void>);
  @override
  _i3.Stream<List<_i4.ShortLinkModel>> getShortLinksFromHistory() =>
      (super.noSuchMethod(Invocation.method(#getShortLinksFromHistory, []),
              returnValue: _i3.Stream<List<_i4.ShortLinkModel>>.empty())
          as _i3.Stream<List<_i4.ShortLinkModel>>);
}
